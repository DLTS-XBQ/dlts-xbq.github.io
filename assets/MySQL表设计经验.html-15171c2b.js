import{_ as d,r as l,o as r,c as u,e as p,w as s,b as a,f as o,a as n}from"./app-7676430d.js";const k={},h=o('<h1 id="mysql表设计经验" tabindex="-1"><a class="header-anchor" href="#mysql表设计经验" aria-hidden="true">#</a> MySQL表设计经验</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>作为后端开发，我们经常需要设计数据库表。整理了21个设计MySQL表的经验准则，分享给大家，希望大家看完会有帮助。</p><h2 id="_1-命名规范" tabindex="-1"><a class="header-anchor" href="#_1-命名规范" aria-hidden="true">#</a> 1. 命名规范</h2><p>数据库表名、字段名、索引名等都需要命名规范，可读性高(一般要求用英文)，让别人一看命名，就知道这个字段表示什么意思。 比如一个表的账号字段如下：</p>',5),b=n("p",null,"account_no,account_number",-1),m=n("p",null,"acc_no,1_acc_no,zhanghao",-1),y=o('<p>表名、字段名必须使用小写字母或者数字，禁止使用数字开头，禁止使用拼音，并且一般不使用英文缩写。<br> 主键索引名为<code>pk_</code>字段名；唯一索引名为<code>uk_</code>字段名；普通索引名则为<code>idx_</code>字段名。</p><h2 id="_2-选择合适的字段类型" tabindex="-1"><a class="header-anchor" href="#_2-选择合适的字段类型" aria-hidden="true">#</a> 2. 选择合适的字段类型</h2><p>设计表时，我们需要选择合适的字段类型，比如：</p><ul><li>尽可能选择存储空间小的字段类型，就好像数字类型的，从<code>tinyint、smallint、int、bigint</code>从左往右开始选择</li><li>小数类型如金额，则选择 <code>decimal</code>，禁止使用 <code>float</code> 和 <code>double</code>。</li><li>如果存储的字符串长度几乎相等，使用 char 定长字符串类型。</li><li><code>varchar</code>是可变长字符串，不预先分配存储空间，长度不要超过<code>5000</code>。 如果存储的值太大，建议字段类型修改为text，同时抽出单独一张表，用主键与之对应。</li><li>同一表中，所有<code>varchar</code>字段的长度加起来，不能大于<code>65535</code>. 如果有这样的需求，请使用<code>TEXT/LONGTEXT</code> 类型。</li></ul><h2 id="_3-主键设计要合理" tabindex="-1"><a class="header-anchor" href="#_3-主键设计要合理" aria-hidden="true">#</a> 3. 主键设计要合理</h2><p>主键设计的话，最好不要与业务逻辑有所关联。有些业务上的字段，比如身份证，虽然是唯一的，一些开发者喜欢用它来做主键，但是不是很建议哈。主键最好是毫无意义的一串独立不重复的数字，比如UUID，又或者Auto_increment自增的主键，或者是雪花算法生成的主键等等;</p><h2 id="_4-选择合适的字段长度" tabindex="-1"><a class="header-anchor" href="#_4-选择合适的字段长度" aria-hidden="true">#</a> 4. 选择合适的字段长度</h2><p>先问大家一个问题，大家知道数据库字段长度表示<code>字符长度</code>还是<code>字节长度</code>嘛？</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>其实在mysql中，<code>varchar</code>和<code>char</code>类型表示字符长度，而其他类型表示的长度都表示字节长度。比如<code>char(10)</code>表示字符长度是<code>10</code>，而<code>bigint(4)</code>表示显示长度是<code>4</code>个字节，但是因为<code>bigint</code>实际长度是<code>8</code>个字节，所以<code>bigint(4)</code>的实际长度就是<code>8</code>个字节，这里的<code>4</code>可以理解为对齐填充长度，当联合零填充<code>zerofill</code>使用时，我们配置的值才会体现效果。<code>tinyint、smallint、int、bigint</code>指定的位数并不会影响字段的存储大小，而是和零填充<code>zerofill</code>联合使用实现对齐填充。</p></div><h2 id="_5-优先考虑逻辑删除-而不是物理删除" tabindex="-1"><a class="header-anchor" href="#_5-优先考虑逻辑删除-而不是物理删除" aria-hidden="true">#</a> 5. 优先考虑逻辑删除，而不是物理删除</h2><p>什么是物理删除？什么是逻辑删除？<br> 物理删除：把数据从硬盘中删除，可释放存储空间<br> 逻辑删除：给数据添加一个字段，比如is_deleted，以标记该数据已经逻辑删除。<br> 物理删除就是执行delete语句，如删除account_no =‘666’的账户信息SQL如下：</p>',11),v=n("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[n("pre",{class:"language-sql"},[n("code",null,[n("span",{class:"token keyword"},"delete"),a(),n("span",{class:"token keyword"},"from"),a(" account_info_tab whereaccount_no "),n("span",{class:"token operator"},"="),n("span",{class:"token string"},"'666'"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),_=n("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[n("pre",{class:"language-sql"},[n("code",null,[n("span",{class:"token keyword"},"update"),a(" account_info_tab "),n("span",{class:"token keyword"},"set"),a(" is_deleted "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"1"),a(),n("span",{class:"token keyword"},"where"),a(" account_no "),n("span",{class:"token operator"},"="),n("span",{class:"token string"},"'666'"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),f=o('<p><strong>为什么推荐用逻辑删除，不推荐物理删除呢？</strong></p><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li>为什么不推荐使用物理删除，因为恢复数据很困难</li><li>物理删除会使自增主键不再连续</li><li>核心业务表 的数据不建议做物理删除，只适合做状态变更。</li></ul></div><h2 id="_6-每个表都需要添加这几个通用字段如主键" tabindex="-1"><a class="header-anchor" href="#_6-每个表都需要添加这几个通用字段如主键" aria-hidden="true">#</a> 6. 每个表都需要添加这几个通用字段如主键</h2><p>表必备一般来说，或具备这几个字段：</p><ul><li><code>id</code>*： 主键，一个表必须得有主键，必须</li><li><code>create_id</code>*： 创建人id，必须</li><li><code>create_time</code>*： 创建时间，必须</li><li><code>update_id</code>*: 修改人，必须，更新记录时，需要更新它</li><li><code>update_time</code>*: 修改时间，必须，更新记录时，需要更新它</li><li><code>version</code> : 数据记录的版本号，用于乐观锁，非必须</li><li><code>remark</code> ：数据记录备注，非必须</li></ul><h2 id="_7-一张表的字段不宜过多" tabindex="-1"><a class="header-anchor" href="#_7-一张表的字段不宜过多" aria-hidden="true">#</a> 7. 一张表的字段不宜过多</h2><p>我们建表的时候，要牢记，一张表的字段不宜过多哈，一般尽量不要超过20个字段。 如果一张表的字段过多，表中保存的数据可能就会很大，查询效率就会很低。因此，一张表不要设计太多字段哈，如果业务需求，实在需要很多字段，可以把一张大的表，拆成多张小的表，它们的主键相同即可。 当表的字段数非常多时，可以将表分成两张表，一张作为条件查询表，一张作为详细内容表 (主要是为了性能考虑)。</p><h2 id="_8-尽可能使用not-null定义字段" tabindex="-1"><a class="header-anchor" href="#_8-尽可能使用not-null定义字段" aria-hidden="true">#</a> 8. 尽可能使用not null定义字段</h2><p>如果没有特殊的理由， 一般都建议将字段定义为 NOT NULL 。<br> 「为什么呢？」</p><ul><li>首先， <code>NOT NULL</code> 可以防止出现空指针问题。</li><li>其次，<code>NULL</code>值存储也需要额外的空间的，它也会导致比较运算更为复杂，使优化器难以优化SQL。</li><li><code>NULL</code>值有可能会导致索引失效</li><li>如果将字段默认设置成一个空字符串或常量值并没有什么不同，且都不会影响到应用逻辑， 那就可以将这个字段设置为<code>NOT NULL</code>。</li></ul><h2 id="_9-设计表时-评估哪些字段需要加索引" tabindex="-1"><a class="header-anchor" href="#_9-设计表时-评估哪些字段需要加索引" aria-hidden="true">#</a> 9. 设计表时，评估哪些字段需要加索引</h2><p>首先，评估你的表数据量。如果你的表数据量只有一百几十行，就没有必要加索引。否则设计表的时候，如果有查询条件的字段，一般就需要建立索引。但是索引也不能滥用：</p><ul><li>索引也不要建得太多，一般单表索引个数不要超过5个。因为创建过多的索引，会降低写得速度。</li><li>区分度不高的字段，不能加索引，如性别等</li><li>索引创建完后，还是要注意避免索引失效的情况，如使用mysql的内置函数，会导致索引失效的</li><li>索引过多的话，可以通过联合索引的话方式来优化。然后的话，索引还有一些规则，如覆盖索引，最左匹配原则等等。</li></ul><p>假设你新建一张用户表，如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user_info_tab <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>modifed_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这张表，很可能会有根据user_id或者name查询用户信息，并且，user_id是唯一的。因此，你是可以给user_id加上唯一索引，name加上普通索引。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user_info_tab <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>modifed_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_name<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span>\n  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> un_user_id <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-不需要严格遵守-3nf-通过业务字段冗余来减少表关联" tabindex="-1"><a class="header-anchor" href="#_10-不需要严格遵守-3nf-通过业务字段冗余来减少表关联" aria-hidden="true">#</a> 10. 不需要严格遵守 3NF，通过业务字段冗余来减少表关联</h2><p>什么是数据库三范式（3NF），大家是否还有印象吗？</p><ul><li>第一范式：对属性的原子性，要求属性具有原子性，不可再分解；</li><li>第二范式：对记录的唯一性，要求记录有唯一标识，即实体的唯一性，即不存在部分依赖；</li><li>第三方式：对字段的冗余性，要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即不存在传递依赖；</li></ul><p>我们设计表及其字段之间的关系, 应尽量满足第三范式。但是有时候，可以适当冗余，来提高效率。比如以下这张表</p><table><thead><tr><th style="text-align:center;">商品名称</th><th style="text-align:center;">商品型号</th><th style="text-align:center;">单价</th><th style="text-align:center;">数量</th><th style="text-align:center;">总金额</th></tr></thead><tbody><tr><td style="text-align:center;">手机</td><td style="text-align:center;">华为</td><td style="text-align:center;">8000</td><td style="text-align:center;">5</td><td style="text-align:center;">40000</td></tr></tbody></table><p>以上这张存放商品信息的基本表。总金额这个字段的存在，表明该表的设计不满足第三范式，因为总金额可以由单价*数量得到，说明总金额是冗余字段。但是，增加总金额这个冗余字段，可以提高查询统计的速度，这就是以空间换时间的作法。 当然，这只是个小例子哈，大家开发设计的时候，要结合具体业务哈。</p><h2 id="_11-避免使用mysql保留字" tabindex="-1"><a class="header-anchor" href="#_11-避免使用mysql保留字" aria-hidden="true">#</a> 11. 避免使用MySQL保留字</h2><p>如果库名、表名、字段名等属性含有保留字时，SQL语句必须用反引号来引用属性名称，这将使得SQL语句书写、SHELL脚本中变量的转义等变得非常复杂。</p><p>因此，我们一般避免使用MySQL保留字，如<code>select</code>、<code>interval</code>、<code>desc</code>等等</p><h2 id="_12-不搞外键关联-一般都在代码维护" tabindex="-1"><a class="header-anchor" href="#_12-不搞外键关联-一般都在代码维护" aria-hidden="true">#</a> 12. 不搞外键关联，一般都在代码维护</h2><p>外键，也叫<code>FOREIGN KEY</code>，它是用于将两个表连接在一起的键。<code>FOREIGN KEY</code>是一个表中的一个字段（或字段集合），它引用另一个表中的<code>PRIMARY KEY</code>。它是用来保证数据的一致性和完整性的。<br> 阿里的Java规范也有这么一条：</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>【强制】不得使用外键与级联，一切外键概念必须在应用层解决。</p></div><p>为什么不推荐使用外键呢？</p><ul><li>使用外键存在性能问题、并发死锁问题、使用起来不方便等等。每次做DELETE或者UPDATE都必须考虑外键约束，会导致开发的时候很难受,测试数据造数据也不方便。</li><li>还有一个场景不能使用外键，就是分库分表。</li></ul><h2 id="_13-一般都选择innodb存储引擎" tabindex="-1"><a class="header-anchor" href="#_13-一般都选择innodb存储引擎" aria-hidden="true">#</a> 13. 一般都选择INNODB存储引擎</h2><p>建表是需要选择存储引擎的，我们一般都选择<code>INNODB</code>存储引擎，除非读写比率小于1%, 才考虑使用<code>MyISAM</code> 。 有些小伙伴可能会有疑惑，不是还有<code>MEMORY</code>等其他存储引擎吗？什么时候使用它呢？其实其他存储引擎一般除了都建议在DBA的指导下使用。 我们来复习一下这MySQL这三种存储引擎的对比区别吧：</p><table><thead><tr><th style="text-align:center;">特性</th><th style="text-align:center;">INNODB</th><th style="text-align:center;">MyISAM</th><th style="text-align:center;">MEMORY</th></tr></thead><tbody><tr><td style="text-align:center;">事务安全</td><td style="text-align:center;">支持</td><td style="text-align:center;">无</td><td style="text-align:center;">无</td></tr><tr><td style="text-align:center;">存储限制</td><td style="text-align:center;">64TB</td><td style="text-align:center;">有</td><td style="text-align:center;">有</td></tr><tr><td style="text-align:center;">空间使用</td><td style="text-align:center;">高</td><td style="text-align:center;">低</td><td style="text-align:center;">低</td></tr><tr><td style="text-align:center;">内存使用</td><td style="text-align:center;">高</td><td style="text-align:center;">低</td><td style="text-align:center;">高</td></tr><tr><td style="text-align:center;">插入数据速度</td><td style="text-align:center;">低</td><td style="text-align:center;">高</td><td style="text-align:center;">高</td></tr><tr><td style="text-align:center;">是否支持外键</td><td style="text-align:center;">支持</td><td style="text-align:center;">无</td><td style="text-align:center;">无</td></tr></tbody></table><h2 id="_14-选择合适统一的字符集。" tabindex="-1"><a class="header-anchor" href="#_14-选择合适统一的字符集。" aria-hidden="true">#</a> 14. 选择合适统一的字符集。</h2><p>数据库库、表、开发程序等都需要统一字符集，通常中英文环境用<code>utf8</code>。 MySQL支持的字符集有<code>utf8</code>、<code>utf8mb4</code>、<code>GBK</code>、<code>latin1</code>等。</p><ul><li>utf8：支持中英文混合场景，国际通过，3个字节长度。</li><li>utf8mb4: 完全兼容utf8，4个字节长度，一般存储emoji表情需要用到它。</li><li>GBK ：支持中文，但是不支持国际通用字符集，2个字节长度。</li><li>latin1：MySQL默认字符集，1个字节长度。</li></ul><h2 id="_15-comment注释的重要性" tabindex="-1"><a class="header-anchor" href="#_15-comment注释的重要性" aria-hidden="true">#</a> 15. comment注释的重要性</h2><p>设计的数据库字段，需要在comment后面注释清楚每个字段的意思，以便于维护。如果该字段用数字或编码表示类型，需注释清楚每个编码或数字的实际意思，如果comment注释过长建议用java枚举类或字典表来存储不同数据表示的意思或内容，便于后期维护。</p>',39),w=n("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[n("pre",{class:"language-sql"},[n("code",null,[n("span",{class:"token identifier"},[n("span",{class:"token punctuation"},"`"),a("session_status"),n("span",{class:"token punctuation"},"`")]),a(),n("span",{class:"token keyword"},"varchar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token keyword"},"COLLATE"),a(" utf8_bin "),n("span",{class:"token operator"},"NOT"),a(),n("span",{class:"token boolean"},"NULL"),a(),n("span",{class:"token keyword"},"COMMENT"),a(),n("span",{class:"token string"},"'session授权态 00：在线-授权态有效 01：下线-授权态失效 02：下线-主动退出 03：下线-在别处被登录'"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-sql line-numbers-mode","data-ext":"sql"},[n("pre",{class:"language-sql"},[n("code",null,[n("span",{class:"token identifier"},[n("span",{class:"token punctuation"},"`"),a("session_status"),n("span",{class:"token punctuation"},"`")]),a(),n("span",{class:"token keyword"},"varchar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token keyword"},"COLLATE"),a(" utf8_bin "),n("span",{class:"token operator"},"NOT"),a(),n("span",{class:"token boolean"},"NULL"),a(),n("span",{class:"token keyword"},"COMMENT"),a(),n("span",{class:"token string"},"'session授权态'"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),L=o('<h2 id="_16-时间的类型选择" tabindex="-1"><a class="header-anchor" href="#_16-时间的类型选择" aria-hidden="true">#</a> 16. 时间的类型选择</h2><p>我们设计表的时候，一般都需要加通用时间的字段，如<code>create_time</code>、<code>update_time</code>等等。那对于时间的类型，我们该如何选择呢？ 对于MySQL来说，主要有<code>date</code>、<code>datetime</code>、<code>time</code>、<code>timestamp</code> 和 <code>year</code>。</p><ul><li><code>date</code> ：表示的日期值, 格式yyyy-mm-dd,范围1000-01-01 到 9999-12-31，3字节</li><li><code>time</code> ：表示的时间值，格式 hh:mm:ss，范围-838:59:59 到 838:59:59，3字节</li><li><code>datetime</code>：表示的日期时间值，格式yyyy-mm-dd hh:mm:ss，范围1000-01-01 00:00:00到9999-12-31 23:59:59```,8字节，跟时区无关</li><li><code>timestamp</code>：表示的时间戳值，格式为yyyymmddhhmmss，范围1970-01-01 00:00:01到2038-01-19 03:14:07，4字节，跟时区有关</li><li><code>year</code>：年份值，格式为yyyy。范围1901到2155，1字节</li></ul><p>推荐优先使用 <code>datetime</code>类型来保存日期和时间，因为存储范围更大，且跟时区无关。</p><h2 id="_17-不建议使用stored-procedure-包括存储过程-触发器" tabindex="-1"><a class="header-anchor" href="#_17-不建议使用stored-procedure-包括存储过程-触发器" aria-hidden="true">#</a> 17. 不建议使用Stored procedure (包括存储过程，触发器)</h2><p>「什么是存储过程」<br> 已预编译为一个可执行过程的一个或多个SQL语句。 「什么是触发器」<br> 触发器，指一段代码，当触发某个事件时，自动执行这些代码。使用场景：</p><ul><li>可以通过数据库中的相关表实现级联更改。</li><li>实时监控某张表中的某个字段的更改而需要做出相应的处理。</li><li>例如可以生成某些业务的编号。</li><li>注意不要滥用，否则会造成数据库及应用程序的维护困难。</li></ul><p>对于MYSQL来说，存储过程、触发器等还不是很成熟， 并没有完善的出错记录处理，不建议使用。</p><h2 id="_18-1-n-一对多-关系的设计" tabindex="-1"><a class="header-anchor" href="#_18-1-n-一对多-关系的设计" aria-hidden="true">#</a> 18. 1:N （一对多）关系的设计</h2><p>日常开发中，1对多的关系应该是非常常见的。比如一个班级有多个学生，一个部门有多个员工等等。这种的建表原则就是： 在从表（N的这一方）创建一个字段，以字段作为外键指向主表（1的这一方）的主键。示意图如下: <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e53cb6dabf9f496eabafd06b01db93bc~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2083&amp;h=530&amp;s=486316&amp;e=png&amp;b=fcf9f9" alt="" loading="lazy"> 学生表是多（N）的一方，会有个字段class_id保存班级表的主键。当然，一班不加外键约束哈，只是单纯保存这个关系而已。 有时候两张表存在N:N关系时，我们应该消除这种关系。通过增加第三张表，把N:N修改为两个 1:N。比如图书和读者，是一个典型的多对多的关系。一本书可以被多个读者借，一个读者又可以借多本书。我们就可以设计一个借书表，包含图书表的主键，以及读者的主键，以及借还标记等字段。</p><h2 id="_19-大字段" tabindex="-1"><a class="header-anchor" href="#_19-大字段" aria-hidden="true">#</a> 19. 大字段</h2><p>设计表的时候，我们尤其需要关注一些大字段，即占用较多存储空间的字段。比如用来记录用户评论的字段，又或者记录博客内容的字段，又或者保存合同数据的字段。如果直接把表字段设计成 <code>text</code>类型的话，就会浪费存储空间，查询效率也不好。<br> 在MySQl中，这种方式保存的设计方案，其实是不太合理的。这种非常大的数据，建议单独抽出做成一张子表，或可以保存到mongodb中，然后，在业务表保存对应mongodb的id即可。 这种设计思想类似于，我们表字段保存图片时，为什么不是保存图片内容，而是直接保存图片url即可。</p><h2 id="_20-考虑是否需要分库分表" tabindex="-1"><a class="header-anchor" href="#_20-考虑是否需要分库分表" aria-hidden="true">#</a> 20. 考虑是否需要分库分表</h2><p>什么是分库分表呢？<br> 分库：就是一个数据库分成多个数据库，部署到不同机器。 <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3dc4e250576e46c48859befbabbac423~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2051&amp;h=1234&amp;s=1182425&amp;e=png&amp;b=fdfcfc" alt="" loading="lazy"> 分表：就是一个数据库表分成多个表。 <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd5861661a7c4da88891ca8c244cf494~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1706&amp;h=750&amp;s=755089&amp;e=png&amp;b=fcfcfc" alt="" loading="lazy"> 我们在设计表的时候，其实可以提前估算一下，是否需要做分库分表。比如一些用户信息，未来可能数据量到达百万设置千万的话，就可以提前考虑分库分表。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>为什么需要分库分表: 数据量太大的话，SQL的查询就会变慢。如果一个查询SQL没命中索引，千百万数据量级别的表可能会拖垮整个数据库。即使SQL命中了索引，如果表的数据量超过一千万的话，查询也是会明显变慢的。这是因为索引一般是B+树结构，数据千万级别的话，B+树的高度会增高，查询就变慢啦。</p></div><p>分库分表主要有水平拆分、垂直拆分的说法，拆分策略有range范围、hash取模。而分库分表主要有这些问题：</p><ul><li>事务问题</li><li>跨库关联</li><li>排序问题</li><li>分页问题</li><li>分布式ID</li></ul><h2 id="_21-sql-编写的一些优化经验" tabindex="-1"><a class="header-anchor" href="#_21-sql-编写的一些优化经验" aria-hidden="true">#</a> 21. sqL 编写的一些优化经验</h2><p>最后的话，跟大家聊来一些写SQL的经验吧：</p><ul><li>查询SQL尽量不要使用select *，而是select具体字段</li><li>如果知道查询结果只有一条或者只要最大/最小一条记录，建议用limit 1</li><li>应尽量避免在where子句中使用or来连接条件</li><li>注意优化limit深分页问题</li><li>使用where条件限定要查询的数据，避免返回多余的行</li><li>尽量避免在索引列上使用mysql的内置函数</li><li>应尽量避免在 where子句中对字段进行表达式操作</li><li>应尽量避免在where 子句中使用!=或&lt;&gt;操作符</li><li>使用联合索引时，注意索引列的顺序，一般遵循最左匹配原则。</li><li>对查询进行优化，应考虑在where 及 order by涉及的列上建立索引</li><li>如果插入数据过多，考虑批量插入</li><li>在适当的时候，使用覆盖索引</li><li>使用explain 分析你SQL的计划</li></ul><h2 id="_22-mysql大小写敏感问题" tabindex="-1"><a class="header-anchor" href="#_22-mysql大小写敏感问题" aria-hidden="true">#</a> 22. MySQL大小写敏感问题</h2><p><code>MySQL</code> 在 <code>Windows</code> 下不区分大小写，但在 <code>Linux</code> 下默认是区分大小写。如果你稍加不注意就会出现在本机开发的程序运行一切正常，发布到服务器行就出现表名找不到的问题，一头雾水。</p><p>由于这个原因，在阿里巴巴规约中这样要求：</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>【强制】表名、字段名必须使用小写字母或数字 ， 禁止出现数字开头，禁止两个下划线中间只 出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p></div><p>因此，数据库名、 表名、字段名，都不允许出现任何大写字母，避免引起不必要的麻烦。</p><p>在设计用户表时，如果表字符核对规则是utf8_general_ci，有可能存在登录账号问题，英文用户名未做大小写校验，也就是说，前台页面登录名无论输入大小写，都能正常登录，这对账号层面来说是不严谨且危险的操作。普遍的两种解决办法：</p><ol><li>修改查询sql，在字段名前边加binary</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> <span class="token keyword">binary</span> username <span class="token operator">=</span> <span class="token string">&#39;AAMkADExM2M5NjQ2LWUzYzctNDFkMC1h&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>修改数据库字段设置</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 如果是建表初期</span>\n<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>\n    <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">binary</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">binary</span> <span class="token operator">not</span> <span class="token boolean">null</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">-- 或者</span>\n<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>\n    <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">collate</span> utf8_bin <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">collate</span> utf8_bin <span class="token operator">not</span> <span class="token boolean">null</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">-- 如果项目已经进行开发甚至上线了，可以这么做</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">BINARY</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">BINARY</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',30);function x(N,E){const i=l("Tabs"),c=l("CodeTabs");return r(),u("div",null,[h,p(i,{id:"15",data:[{id:"正例"},{id:"反例"}],"tab-id":"mysql"},{title0:s(({value:e,isActive:t})=>[a("正例")]),title1:s(({value:e,isActive:t})=>[a("反例")]),tab0:s(({value:e,isActive:t})=>[b]),tab1:s(({value:e,isActive:t})=>[m]),_:1}),y,p(c,{id:"86",data:[{id:"物理删除"},{id:"逻辑删除"}],"tab-id":"mysql"},{title0:s(({value:e,isActive:t})=>[a("物理删除")]),title1:s(({value:e,isActive:t})=>[a("逻辑删除")]),tab0:s(({value:e,isActive:t})=>[v]),tab1:s(({value:e,isActive:t})=>[_]),_:1}),f,p(c,{id:"477",data:[{id:"正例"},{id:"反例"}],"tab-id":"mysql"},{title0:s(({value:e,isActive:t})=>[a("正例")]),title1:s(({value:e,isActive:t})=>[a("反例")]),tab0:s(({value:e,isActive:t})=>[w]),tab1:s(({value:e,isActive:t})=>[g]),_:1}),L])}const A=d(k,[["render",x],["__file","MySQL表设计经验.html.vue"]]);export{A as default};
